;;; My .emacs from the Jurassic Age.

(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(c-default-style (quote ((java-mode . "java") (awk-mode . "awk") (other . "k&r"))))
 '(eshell-cmpl-ignore-case t)
 '(org-hide-leading-stars t)
 '(read-buffer-completion-ignore-case t)
 '(read-file-name-completion-ignore-case t)
 '(save-place t nil (saveplace))
 '(scroll-bar-mode nil)
 '(show-paren-mode t)
 '(tool-bar-mode nil)
 '(tooltip-mode nil))

(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(default ((t (:inherit nil :stipple nil :background "white" :foreground "black" :inverse-video nil :box nil :strike-through nil :overline nil :underline nil :slant normal :weight normal :height 98 :width normal :foundry "unknown" :family "DejaVu Sans Mono")))))

;; Map keys for moving to next buffer, previous buffer
(global-set-key [C-tab] 'next-buffer)	
(global-set-key [C-S-iso-lefttab] 'previous-buffer)

;; Inhibit the splash screen
(setq inhibit-splash-screen t)

;; (add-to-list 'load-path "/usr/share/emacs/site-lisp/")
(require 'color-theme)
;;(color-theme-initialize)
;; (load-file "~/.emacs.d/themes/color-theme-blackboard.el")
;; (color-theme-blackboard)
(load-file "~/.emacs.d/themes/color-theme-zenburn.el")
(color-theme-zenburn)
;; (load-file "~/.emacs.d/themes/color-theme-desert.el")
;; (color-theme-desert)

;; (color-theme-aalto-light)	   ;
;; (eval-after-load "color-theme"
;;   '(progn
;;      (color-theme-initialize)
;;      (color-theme-dark-laptop)))


;; Toggle Icomplete mode on
(icomplete-mode)

;; Toggle ido-mode on
(ido-mode)

;; Toggle iswitchb-mode on
;; (iswitchb-mode)
;; Note : I have set read-file-name-complete-ignore-case to non-nil
;; Note : I have set read-buffer-completion-ignore-case to non-nil

					;(set-default-font "-Misc-Fixed-Medium-R-Normal--20-200-75-75-C-100-ISO8859-1")


					; Scheme interpreter integration
(setq-default scheme-program-name "guile-1.8")

(put 'narrow-to-region 'disabled nil)

(fset 'Novel-init
      (lambda (&optional arg) "Keyboard macro." (interactive "p") (kmacro-exec-ring-item (quote ([24 6 87 114 105 116 105 110 103 45 102 105 108 101 115 47 81 117 101 115 116 47 84 104 101 45 81 117 101 115 116 return 24 52 6 113 117 101 115 116 45 105 100 101 97 115 46 111 114 103 return S-iso-lefttab S-iso-lefttab S-iso-lefttab 24 111 134217848 112 97 114 97 103 114 97 112 104 45 105 110 100 101 110 116 45 116 101 120 116 45 109 111 100 101 return 134217848 114 101 102 105 108 108 45 109 111 100 101 return 134217848 99 111 108 111 114 45 116 104 101 109 101 45 100 97 114 107 45 108 97 112 116 111 112 return 134217848 99 111 108 111 114 45 116 104 101 109 101 45 99 108 97 114 105 116 121 return 134217848 119 backspace 112 114 105 110 116 backspace backspace backspace backspace backspace 102 105 110 100 45 102 105 108 101 backspace backspace backspace backspace backspace backspace backspace backspace backspace 111 116 104 101 114 45 119 105 110 100 111 119 return 24 111 134217761 119 99 32 45 119 32 116 backspace 84 104 101 45 81 117 101 116 backspace 115 116 return 24 6 M-backspace M-backspace M-backspace 111 114 103 47 78 101 120 116 45 65 99 116 105 111 110 115 45 108 105 115 116 134217826 134217827 46 111 114 103 return 24 107 return] 0 "%d")) arg)))

;; Open my Projects-List file and Next-Actions file side by side
(fset 'Org-init
      (lambda (&optional arg) "Keyboard macro." (interactive "p") (kmacro-exec-ring-item (quote ([24 6 113 backspace 111 114 103 tab 110 101 120 tab return 24 52 6 112 114 111 106 tab return] 0 "%d")) arg)))



;; Load my Org files on startup
					;(Org-init)




(fset 'org-new-subheading
      (lambda (&optional arg) "Keyboard macro." (interactive "p") (kmacro-exec-ring-item (quote ([C-return M-right] 0 "%d")) arg)))

(global-set-key (kbd "C-c n") 'org-new-subheading)

(fset 'My-C-Compile-and-Run
      (lambda (&optional arg) "Keyboard macro." (interactive "p") (kmacro-exec-ring-item (quote ([24 19 134217848 99 111 109 112 105 108 101 return return 24 111 24 98 101 115 104 return] 0 "%d")) arg)))

(global-set-key [f5] 'My-C-Compile-and-Run)

(add-hook 'c-mode-common-hook 'c-toggle-auto-newline 1)

(add-hook 'org-mode-hook 'visual-line-mode)
